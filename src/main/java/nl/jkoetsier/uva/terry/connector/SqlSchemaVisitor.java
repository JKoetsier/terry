package nl.jkoetsier.uva.terry.connector;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import nl.jkoetsier.uva.terry.intrep.SqlQuery;
import nl.jkoetsier.uva.terry.intrep.schema.Schema;
import nl.jkoetsier.uva.terry.intrep.schema.column.BigIntegerColumn;
import nl.jkoetsier.uva.terry.intrep.schema.column.BooleanColumn;
import nl.jkoetsier.uva.terry.intrep.schema.column.CharColumn;
import nl.jkoetsier.uva.terry.intrep.schema.column.Column;
import nl.jkoetsier.uva.terry.intrep.schema.column.DateColumn;
import nl.jkoetsier.uva.terry.intrep.schema.column.DateTimeColumn;
import nl.jkoetsier.uva.terry.intrep.schema.column.DateTimeTimezoneColumn;
import nl.jkoetsier.uva.terry.intrep.schema.column.DecimalColumn;
import nl.jkoetsier.uva.terry.intrep.schema.column.DoubleColumn;
import nl.jkoetsier.uva.terry.intrep.schema.column.FloatColumn;
import nl.jkoetsier.uva.terry.intrep.schema.column.IntegerColumn;
import nl.jkoetsier.uva.terry.intrep.schema.column.VarCharColumn;
import nl.jkoetsier.uva.terry.intrep.schema.visitor.SchemaVisitor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public abstract class SqlSchemaVisitor extends SchemaVisitor {

  private static Logger logger = LoggerFactory.getLogger(SqlSchemaVisitor.class);
  protected HashMap<String, SqlQuery> createQueries = new HashMap<>();
  protected List<ColumnDef> columnDefStack = new ArrayList<>();

  protected abstract SqlIdentifierQuoter getIdentifierQuoter();

  protected ColumnDef createColumnDef(Column column, String type) {
    ColumnDef columnDef = new ColumnDef(type.toLowerCase(), column.getName(),
        column.isAllowedEmpty());

    if (column.isAutoGenerated()) {
      columnDef.setAutoGenerated(true);
    }

    if (column.hasArguments()) {
      columnDef.setArguments(column.getArguments());
    }

    return columnDef;
  }

  protected String quoteIdentifier(String input) {
    return getIdentifierQuoter().quoteString(input);
  }

  protected List<String> quoteIdentifiers(List<String> input) {
    return getIdentifierQuoter().quoteStrings(input);
  }

  @Override
  public HashMap<String, SqlQuery> getCreateQueries() {
    return createQueries;
  }

  @Override
  public void visit(BigIntegerColumn bigIntegerColumn) {
    columnDefStack.add(createColumnDef(bigIntegerColumn, "BIGINT"));
  }

  @Override
  public void visit(BooleanColumn booleanColumn) {
    columnDefStack.add(createColumnDef(booleanColumn, "BOOLEAN"));
  }

  @Override
  public void visit(CharColumn charColumn) {
    columnDefStack.add(createColumnDef(charColumn, "CHAR"));
  }

  @Override
  public void visit(DateColumn dateColumn) {
    columnDefStack.add(createColumnDef(dateColumn, "DATE"));
  }

  @Override
  public void visit(DateTimeColumn dateTimeColumn) {
    columnDefStack.add(createColumnDef(dateTimeColumn, "DATETIME"));
  }

  @Override
  public void visit(DateTimeTimezoneColumn dateTimeOffsetField) {
    columnDefStack.add(createColumnDef(dateTimeOffsetField, "TIMESTAMP"));
  }

  @Override
  public void visit(DecimalColumn decimalColumn) {
    columnDefStack.add(createColumnDef(decimalColumn, "DECIMAL"));
  }

  @Override
  public void visit(DoubleColumn doubleColumn) {
    columnDefStack.add(createColumnDef(doubleColumn, "DOUBLE"));
  }

  @Override
  public void visit(FloatColumn floatField) {
    columnDefStack.add(createColumnDef(floatField, "FLOAT"));
  }

  @Override
  public void visit(IntegerColumn integerField) {
    columnDefStack.add(createColumnDef(integerField, "INT"));
  }

  @Override
  public void visit(VarCharColumn varCharField) {
    columnDefStack.add(createColumnDef(varCharField, "VARCHAR"));
  }

  @Override
  public void visit(Schema dataModel) {

  }
}
