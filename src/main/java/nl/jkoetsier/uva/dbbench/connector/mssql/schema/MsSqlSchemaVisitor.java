package nl.jkoetsier.uva.dbbench.connector.mssql.schema;

import nl.jkoetsier.uva.dbbench.connector.ColumnDef;
import nl.jkoetsier.uva.dbbench.connector.SqlSchemaVisitor;
import nl.jkoetsier.uva.dbbench.internal.schema.Entity;
import nl.jkoetsier.uva.dbbench.internal.schema.fields.BooleanField;
import nl.jkoetsier.uva.dbbench.internal.schema.fields.DateTimeTimezoneField;

public class MsSqlSchemaVisitor extends SqlSchemaVisitor {

  @Override
  public void visit(DateTimeTimezoneField dateTimeOffsetField) {
    columnDefStack.add(createColumnDef(dateTimeOffsetField, "DATETIMEOFFSET"));
  }

  @Override
  public void visit(BooleanField booleanField) {
    columnDefStack.add(createColumnDef(booleanField, "BIT"));
  }

  @Override
  public void visit(Entity entity) {
    String createTable = String.format(
        "CREATE TABLE [%s] (", entity.getName()
    );

    for (ColumnDef columnDef : columnDefStack) {
      String arguments = "";

      if (columnDef.getArguments() != null) {
        arguments = String.format(
            "(%s)",
            String.join(", ", columnDef.getArguments())
        );
      }

      createTable = createTable.concat(String.format(
          "\n\t[%s] %s%s%s %s,",
          columnDef.getName(),
          columnDef.getType(),
          arguments,
          columnDef.isAutoGenerated() ? " IDENTITY(1,1)" : "",
          columnDef.isNull() ? "NULL" : "NOT NULL"
      ));
    }

    if (entity.getPrimaryKey() != null) {
      createTable = createTable.concat(String.format(
          "\n\tCONSTRAINT PK_%s PRIMARY KEY (\n\t\t%s\n\t)",
          entity.getName(),
          String.join(",\n\t\t", entity.getPrimaryKeyFieldNames())
      ));
    } else if (createTable.charAt(createTable.length() - 1) == ',') {
      createTable = createTable.substring(0, createTable.length() - 1);
    }

    createTable = createTable.concat("\n)");

    createQueries.put(entity.getName(), createTable);
    columnDefStack.clear();
  }
}
