package nl.jkoetsier.uva.dbbench.connector;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import nl.jkoetsier.uva.dbbench.internal.schema.Schema;
import nl.jkoetsier.uva.dbbench.internal.schema.fields.BigIntegerField;
import nl.jkoetsier.uva.dbbench.internal.schema.fields.BooleanField;
import nl.jkoetsier.uva.dbbench.internal.schema.fields.CharField;
import nl.jkoetsier.uva.dbbench.internal.schema.fields.DateField;
import nl.jkoetsier.uva.dbbench.internal.schema.fields.DateTimeField;
import nl.jkoetsier.uva.dbbench.internal.schema.fields.DateTimeTimezoneField;
import nl.jkoetsier.uva.dbbench.internal.schema.fields.DecimalField;
import nl.jkoetsier.uva.dbbench.internal.schema.fields.DoubleField;
import nl.jkoetsier.uva.dbbench.internal.schema.fields.Field;
import nl.jkoetsier.uva.dbbench.internal.schema.fields.FloatField;
import nl.jkoetsier.uva.dbbench.internal.schema.fields.IntegerField;
import nl.jkoetsier.uva.dbbench.internal.schema.fields.VarCharField;
import nl.jkoetsier.uva.dbbench.internal.schema.visitor.SchemaVisitor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public abstract class SqlSchemaVisitor extends SchemaVisitor {

  private static Logger logger = LoggerFactory.getLogger(SqlSchemaVisitor.class);

  protected HashMap<String, String> createQueries = new HashMap<>();
  protected List<ColumnDef> columnDefStack = new ArrayList<>();

  protected ColumnDef createColumnDef(Field field, String type) {
    ColumnDef columnDef = new ColumnDef(type.toLowerCase(), field.getName(),
        field.isAllowedEmpty());

    if (field.isAutoGenerated()) {
      columnDef.setAutoGenerated(true);
    }

    if (field.hasArguments()) {
      columnDef.setArguments(field.getArguments());
    }

    return columnDef;
  }

  @Override
  public HashMap<String, String> getCreateQueries() {
    return createQueries;
  }

  @Override
  public void visit(BigIntegerField bigIntegerField) {
    columnDefStack.add(createColumnDef(bigIntegerField, "BIGINT"));
  }

  @Override
  public void visit(BooleanField booleanField) {
    columnDefStack.add(createColumnDef(booleanField, "BIT"));
  }

  @Override
  public void visit(CharField charField) {
    columnDefStack.add(createColumnDef(charField, "CHAR"));
  }

  @Override
  public void visit(DateField dateField) {
    columnDefStack.add(createColumnDef(dateField, "DATE"));
  }

  @Override
  public void visit(DateTimeField dateTimeField) {
    columnDefStack.add(createColumnDef(dateTimeField, "DATETIME"));
  }

  @Override
  public void visit(DateTimeTimezoneField dateTimeOffsetField) {
    columnDefStack.add(createColumnDef(dateTimeOffsetField, "TIMESTAMP"));
  }

  @Override
  public void visit(DecimalField decimalField) {
    columnDefStack.add(createColumnDef(decimalField, "DECIMAL"));
  }

  @Override
  public void visit(DoubleField doubleField) {
    columnDefStack.add(createColumnDef(doubleField, "DOUBLE"));
  }

  @Override
  public void visit(FloatField floatField) {
    columnDefStack.add(createColumnDef(floatField, "FLOAT"));
  }

  @Override
  public void visit(IntegerField integerField) {
    columnDefStack.add(createColumnDef(integerField, "INT"));
  }

  @Override
  public void visit(VarCharField varCharField) {
    columnDefStack.add(createColumnDef(varCharField, "VARCHAR"));
  }

  @Override
  public void visit(Schema dataModel) {

  }
}
