package nl.jkoetsier.terry.input.schema.sql;

import java.util.ArrayList;
import java.util.List;
import net.sf.jsqlparser.statement.StatementVisitorAdapter;
import net.sf.jsqlparser.statement.create.table.ColumnDefinition;
import net.sf.jsqlparser.statement.create.table.CreateTable;
import net.sf.jsqlparser.statement.create.table.Index;
import nl.jkoetsier.terry.input.exception.InvalidQueryException;
import nl.jkoetsier.terry.input.util.StringUtil;
import nl.jkoetsier.terry.intrep.schema.Schema;
import nl.jkoetsier.terry.intrep.schema.Table;
import nl.jkoetsier.terry.intrep.schema.column.Column;
import nl.jkoetsier.terry.intrep.schema.column.FieldFactory;

public class SqlSchemaStatementVisitor extends StatementVisitorAdapter {

  private Schema schema = new Schema();

  public Schema getSchema() {
    return schema;
  }

  @Override
  public void visit(CreateTable createTable) {
    Table table = new Table(createTable.getTable().getName());

    for (ColumnDefinition colDef : createTable.getColumnDefinitions()) {
      Column column = FieldFactory.create(colDef.getColDataType().getDataType());
      column.setName(StringUtil.unEscapeIdentifier(colDef.getColumnName()));

      if (colDef.getColDataType().getArgumentsStringList() != null) {
        column.setArguments(colDef.getColDataType().getArgumentsStringList());
      }

      String colSpecString;

      if (colDef.getColumnSpecStrings() != null) {
        colSpecString = String.join(" ", colDef.getColumnSpecStrings());
      } else {
        colSpecString = "";
      }
      column.setAllowedEmpty(!colSpecString.contains("NOT NULL"));
      column.setAutoGenerated(
          colSpecString.contains("IDENTITY") || colSpecString.contains("AUTO_INCREMENT"));

      table.addColumn(column);
    }

    if (createTable.getIndexes() != null) {
      setPrimaryKey(createTable, table);
    }

    schema.addTable(table);
  }

  private void setPrimaryKey(CreateTable createTable, Table table) {
    for (Index index : createTable.getIndexes()) {
      if (index.getType().equals("PRIMARY KEY")) {

        List<Column> columns = new ArrayList<>();

        for (String columnName : index.getColumnsNames()) {
          Column column = table.getColumn(columnName);

          if (column == null) {
            throw new InvalidQueryException(
                String.format("Column %s for primary key in table %s does not exist", columnName,
                    table.getName())
            );
          }

          columns.add(column);
        }

        table.setPrimaryKey(columns);
      }
    }
  }
}
