package nl.jkoetsier.terry.connector.postgres.schema;

import nl.jkoetsier.terry.connector.ColumnDef;
import nl.jkoetsier.terry.connector.SqlIdentifierQuoter;
import nl.jkoetsier.terry.connector.SqlSchemaVisitor;
import nl.jkoetsier.terry.connector.postgres.PostgresIdentifierQuoter;
import nl.jkoetsier.terry.intrep.SqlQuery;
import nl.jkoetsier.terry.intrep.schema.Table;
import nl.jkoetsier.terry.intrep.schema.column.DateTimeColumn;
import nl.jkoetsier.terry.intrep.schema.column.DecimalColumn;
import nl.jkoetsier.terry.intrep.schema.column.DoubleColumn;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PostgresSchemaVisitor extends SqlSchemaVisitor {

  private static Logger logger = LoggerFactory.getLogger(PostgresSchemaVisitor.class);

  @Override
  protected SqlIdentifierQuoter getIdentifierQuoter() {
    return new PostgresIdentifierQuoter();
  }

  @Override
  public void visit(DecimalColumn decimalColumn) {
    columnDefStack.add(createColumnDef(decimalColumn, "NUMERIC"));
  }

  @Override
  public void visit(DoubleColumn doubleColumn) {
    columnDefStack.add(createColumnDef(doubleColumn, "FLOAT8"));
  }

  @Override
  public void visit(DateTimeColumn dateTimeColumn) {
    columnDefStack.add(createColumnDef(dateTimeColumn, "TIMESTAMP"));
  }

  @Override
  public void visit(Table table) {

    String createTable = String.format(
        "CREATE TABLE %s (", quoteIdentifier(table.getName())
    );

    for (ColumnDef columnDef : columnDefStack) {
      String arguments = "";

      if (columnDef.getArguments() != null) {
        arguments = String.format(
            "(%s)",
            String.join(", ", columnDef.getArguments())
        );
      }

      createTable = createTable.concat(String.format(
          "\n\t%s %s%s %s,",
          quoteIdentifier(columnDef.getName()),
          columnDef.isAutoGenerated() ? "SERIAL" : columnDef.getType(),
          arguments,
          columnDef.isNull() ? "NULL" : "NOT NULL"
      ));
    }

    if (table.getPrimaryKey() != null) {
      createTable = createTable.concat(String.format(
          "\n\tPRIMARY KEY (\n\t\t%s\n\t)",
          String.join(",\n\t\t", quoteIdentifiers(table.getPrimaryKeyFieldNames()))
      ));
    } else if (createTable.charAt(createTable.length() - 1) == ',') {
      createTable = createTable.substring(0, createTable.length() - 1);
    }

    createTable = createTable.concat("\n);");

    createQueries.put(table.getName(), new SqlQuery(createTable));
    columnDefStack.clear();
  }
}
